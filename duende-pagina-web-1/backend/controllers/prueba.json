***********************
USER REs <ref *2> ServerResponse {
  _events: [Object: null prototype
    ] {
    finish: [
            [Function: bound resOnFinish
            ],
            [Function: onevent
            ]
        ],
    end: [Function: onevent
        ]
    },
  _eventsCount: 2,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  destroyed: false,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  maxRequestsOnConnectionReached: false,
  _defaultKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  strictContentLength: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  _closed: false,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0
            },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      constructed: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: false,
      decoder: null,
      encoding: null,
            [Symbol(kPaused)
            ]: false
        },
    _events: [Object: null prototype
        ] {
      end: [Array
            ],
      timeout: [Function: socketOnTimeout
            ],
      data: [Function: bound socketOnData
            ],
      error: [Array
            ],
      close: [Array
            ],
      drain: [Function: bound socketOnDrain
            ],
      resume: [Function: onSocketResume
            ],
      pause: [Function: onSocketPause
            ]
        },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite
            ],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
            [Symbol(kOnFinished)
            ]: []
        },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      joinDuplicateHeaders: undefined,
      _events: [Object: null prototype
            ],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP
            ],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6: : : : 3500',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(kCapture)
            ]: false,
            [Symbol(async_id_symbol)
            ]: 18,
            [Symbol(http.server.connections)
            ]: ConnectionsList {},
            [Symbol(http.server.connectionsCheckingInterval)
            ]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList
                ],
        _idleNext: [TimersList
                ],
        _idleStart: 3712,
        _onTimeout: [Function: bound checkConnections
                ],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
                [Symbol(refed)
                ]: false,
                [Symbol(kHasPrimitive)
                ]: false,
                [Symbol(asyncId)
                ]: 17,
                [Symbol(triggerId)
                ]: 1
            },
            [Symbol(kUniqueHeaders)
            ]: null
        },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      joinDuplicateHeaders: undefined,
      _events: [Object: null prototype
            ],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP
            ],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6: : : : 3500',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(kCapture)
            ]: false,
            [Symbol(async_id_symbol)
            ]: 18,
            [Symbol(http.server.connections)
            ]: ConnectionsList {},
            [Symbol(http.server.connectionsCheckingInterval)
            ]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList
                ],
        _idleNext: [TimersList
                ],
        _idleStart: 3712,
        _onTimeout: [Function: bound checkConnections
                ],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
                [Symbol(refed)
                ]: false,
                [Symbol(kHasPrimitive)
                ]: false,
                [Symbol(asyncId)
                ]: 17,
                [Symbol(triggerId)
                ]: 1
            },
            [Symbol(kUniqueHeaders)
            ]: null
        },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders
            ],
      '2': [Function: parserOnHeadersComplete
            ],
      '3': [Function: parserOnBody
            ],
      '4': [Function: parserOnMessageComplete
            ],
      '5': [Function: bound onParserExecute
            ],
      '6': [Function: bound onParserTimeout
            ],
      _headers: [],
      _url: '',
      socket: [Circular *1
            ],
      incoming: [IncomingMessage
            ],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming
            ],
            [Symbol(resource_symbol)
            ]: [HTTPServerAsyncResource
            ]
        },
    on: [Function: socketListenerWrap
        ],
    addListener: [Function: socketListenerWrap
        ],
    prependListener: [Function: socketListenerWrap
        ],
    setEncoding: [Function: socketSetEncoding
        ],
    _paused: false,
    _httpMessage: [Circular *2
        ],
    timeout: 0,
    _peername: { address: ': : 1', family: 'IPv6', port: 56567
        },
        [Symbol(async_id_symbol)
        ]: 304,
        [Symbol(kHandle)
        ]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
            [Symbol(owner_symbol)
            ]: [Circular *1
            ]
        },
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]: Timeout {
      _idleTimeout: -1,
      _idlePrev: null,
      _idleNext: null,
      _idleStart: 7952,
      _onTimeout: null,
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: true,
            [Symbol(refed)
            ]: false,
            [Symbol(kHasPrimitive)
            ]: false,
            [Symbol(asyncId)
            ]: 355,
            [Symbol(triggerId)
            ]: 352
        },
        [Symbol(kBuffer)
        ]: null,
        [Symbol(kBufferCb)
        ]: null,
        [Symbol(kBufferGen)
        ]: null,
        [Symbol(kCapture)
        ]: false,
        [Symbol(kSetNoDelay)
        ]: true,
        [Symbol(kSetKeepAlive)
        ]: false,
        [Symbol(kSetKeepAliveInitialDelay)
        ]: 0,
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
  _header: null,
  _keepAliveTimeout: 5000,
  _onPendingData: [Function: bound updateOutgoingData
    ],
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0
            },
      length: 0,
      pipes: [],
      flowing: true,
      ended: true,
      endEmitted: true,
      reading: false,
      constructed: true,
      sync: false,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      destroyed: true,
      errored: null,
      closed: true,
      closeEmitted: true,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: true,
      decoder: null,
      encoding: null,
            [Symbol(kPaused)
            ]: false
        },
    _events: [Object: null prototype
        ] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _readableState: [ReadableState
            ],
      _events: [Object: null prototype
            ],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState
            ],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server
            ],
      _server: [Server
            ],
      parser: [HTTPParser
            ],
      on: [Function: socketListenerWrap
            ],
      addListener: [Function: socketListenerWrap
            ],
      prependListener: [Function: socketListenerWrap
            ],
      setEncoding: [Function: socketSetEncoding
            ],
      _paused: false,
      _httpMessage: [Circular *2
            ],
      timeout: 0,
      _peername: [Object
            ],
            [Symbol(async_id_symbol)
            ]: 304,
            [Symbol(kHandle)
            ]: [TCP
            ],
            [Symbol(lastWriteQueueSize)
            ]: 0,
            [Symbol(timeout)
            ]: Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 7952,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
                [Symbol(refed)
                ]: false,
                [Symbol(kHasPrimitive)
                ]: false,
                [Symbol(asyncId)
                ]: 355,
                [Symbol(triggerId)
                ]: 352
            },
            [Symbol(kBuffer)
            ]: null,
            [Symbol(kBufferCb)
            ]: null,
            [Symbol(kBufferGen)
            ]: null,
            [Symbol(kCapture)
            ]: false,
            [Symbol(kSetNoDelay)
            ]: true,
            [Symbol(kSetKeepAlive)
            ]: false,
            [Symbol(kSetKeepAliveInitialDelay)
            ]: 0,
            [Symbol(kBytesRead)
            ]: 0,
            [Symbol(kBytesWritten)
            ]: 0
        },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    rawHeaders: [
      'Host',
      'localhost: 3500',
      'Connection',
      'keep-alive',
      'Content-Length',
      '21',
      'sec-ch-ua',
      '"Google Chrome";v="119",
            "Chromium";v="119",
            "Not?A_Brand";v="24"',
      'sec-ch-ua-platform',
      '"Windows"',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
      'Content-Type',
      'application/json',
      'Accept',
      '* /*',
      'Origin',
      'http://localhost:3000',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost:3000/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'en-US,en;q=0.9,es-CR;q=0.8,es;q=0.7'
    ],
    rawTrailers: [],
    joinDuplicateHeaders: undefined,
    aborted: false,
    upgrade: false,
    url: '/admin/ventas/6560e7069fae732aadb27af0',
    method: 'PUT',
    statusCode: null,
    statusMessage: null,
    client: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [Circular *2],
      timeout: 0,
      _peername: [Object],
      [Symbol(async_id_symbol)]: 304,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 7952,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 355,
        [Symbol(triggerId)]: 352
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: true,
    _dumped: false,
    next: [Function: next],
    baseUrl: '/sales',
    originalUrl: '/sales/admin/ventas/6560e7069fae732aadb27af0',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/admin/ventas/6560e7069fae732aadb27af0',
      path: '/admin/ventas/6560e7069fae732aadb27af0',
      href: '/admin/ventas/6560e7069fae732aadb27af0',
      _raw: '/admin/ventas/6560e7069fae732aadb27af0'
    },
    params: { id: '6560e7069fae732aadb27af0' },
    query: {},
    res: [Circular *2],
    body: { status: 'Aceptado' },
    _body: true,
    length: undefined,
    secret: undefined,
    cookies: [Object: null prototype] {},
    signedCookies: [Object: null prototype] {},
    _startAt: [ 527125, 477452100 ],
    _startTime: 2023-11-25T06:39:31.839Z,
    _remoteAddress: '::1',
    route: Route {
      path: '/admin/ventas/:id',
      stack: [Array],
      methods: [Object]
    },
    [Symbol(kCapture)]: false,
    [Symbol(kHeaders)]: {
      host: 'localhost:3500',
      connection: 'keep-alive',
      'content-length': '21',
      'sec-ch-ua': '"Google Chrome";v="119", "Chromium";v="119", "Not?A_Brand";v="24"',
      'sec-ch-ua-platform': '"Windows"',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
      'content-type': 'application/json',
      accept: '*/*',
      origin: 'http: //localhost:3000',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http: //localhost:3000/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'en-US,en;q=0.9,es-CR;q=0.8,es;q=0.7'
        },
        [Symbol(kHeadersCount)
        ]: 32,
        [Symbol(kTrailers)
        ]: null,
        [Symbol(kTrailersCount)
        ]: 0
    },
  _sent100: false,
  _expect_continue: false,
  _maxRequestsPerSocket: 0,
  locals: [Object: null prototype
    ] {},
  _startAt: undefined,
  _startTime: undefined,
  writeHead: [Function: writeHead
    ],
  __onFinished: [Function: listener
    ] { queue: [
            [Function: logRequest
            ]
        ]
    },
    [Symbol(kCapture)
    ]: false,
    [Symbol(kBytesWritten)
    ]: 0,
    [Symbol(kNeedDrain)
    ]: false,
    [Symbol(corked)
    ]: 0,
    [Symbol(kOutHeaders)
    ]: [Object: null prototype
    ] {
    'x-powered-by': [ 'X-Powered-By', 'Express'
        ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', 'http: //localhost:3000' ],
    vary: [ 'Vary', 'Origin'
            ],
    'access-control-allow-credentials': [ 'Access-Control-Allow-Credentials', 'true'
            ],
    'access-control-allow-headers': [
      'Access-Control-Allow-Headers',
      'Origin, X-Requested-With, Content-Type, Accept, Authorization'
            ]
        },
        [Symbol(errored)
        ]: null,
        [Symbol(kUniqueHeaders)
        ]: null
    }
PARAMS { id: '6560e7069fae732aadb27af0'
    }